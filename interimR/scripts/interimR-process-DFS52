#!/usr/bin/env python

from interimR.lib_process_DFS52 import DFS52_processing
import numpy as np
import ConfigParser
import sys
import os

try:
    this_user = sys.argv[1]
except:
    print('You must provide a user options entry for this script') ; exit()

# open the parser and read the info on the job
homedir = os.path.expanduser('~')
config = ConfigParser.ConfigParser()
config.read(homedir + '/.interimR/user.opts')

dict_ctl = {}

for item in config.options(this_user):
    dict_ctl[item] = config.get(this_user,item)

# get variables names for specified model
varnames = ConfigParser.ConfigParser()
varnames.read(homedir + '/.interimR/model.variables')

for item in varnames.options(dict_ctl['target_model']):
    dict_ctl[item] = varnames.get(dict_ctl['target_model'],item)

print(dict_ctl.keys())

if dict_ctl['drown_files'] == 'True':
    drown_fields = True
    drownstring = 'drowned_'
elif dict_ctl['drown_files'] == 'False':
    drown_fields = False
    drownstring = ''
else:
    exit('Unrecognized value for drown_files, must be either True or False')

# read dfs.datafiles
datafiles = ConfigParser.ConfigParser()
datafiles.read(homedir + '/.interimR/dfs.datafiles')

dict_datafiles = {}

for item in datafiles.options(this_user):
    dict_datafiles[item] = datafiles.get(this_user,item)

#--------------------------------------------------------------------------------------------------

fyear = int(dict_ctl['first_year'])
lyear = int(dict_ctl['last_year'])

for year in np.arange(fyear,lyear+1):

    my_inputs = {'file_t2':     dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_t2']     + '_ERAinterim_' + str(year) + '.nc', \
                 'file_q2':     dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_q2']     + '_ERAinterim_' + str(year) + '.nc', \
                 'file_u10':    dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_u10']    + '_ERAinterim_' + str(year) + '.nc', \
                 'file_v10':    dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_v10']    + '_ERAinterim_' + str(year) + '.nc', \
                 'file_radlw':  dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_radlw']  + '_ERAinterim_' + str(year) + '.nc', \
                 'file_radsw':  dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_radsw']  + '_ERAinterim_' + str(year) + '.nc', \
                 'file_precip': dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_precip'] + '_ERAinterim_' + str(year) + '.nc', \
                 'file_snow':   dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_snow']   + '_ERAinterim_' + str(year) + '.nc', \
                 'file_msl':    dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_msl']    + '_ERAinterim_' + str(year) + '.nc', \
                 'file_tcc':    dict_ctl['processed_nc_dir'] + drownstring + dict_ctl['name_tcc']    + '_ERAinterim_' + str(year) + '.nc', \
                 'output_dir':  dict_ctl['dfs52_output_dir']                                          , \
                 'target_model':dict_ctl['target_model']                                              , \
                 'year':year, 'ncumul':4, 'nx':512, 'ny':256, 'freq':'3h'}

    dict_ctl.update(my_inputs)
    go = DFS52_processing(dict_ctl,dict_datafiles,drown=drown_fields)
    go()
